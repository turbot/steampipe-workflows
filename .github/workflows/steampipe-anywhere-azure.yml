name: Release Steampipe Anywhere Components (Azure)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version to release (must be prefixed with 'v')"
        required: true

  workflow_call:
        
jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - name: Check out steampipe-export
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
        with:
          repository: "turbot/steampipe-export"
          ref: main

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Get latest version tag
        run: |-
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "Version: ${VERSION}"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Setup GoLang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Fetch plugin module
        run: go get github.com/turbot/steampipe-plugin-${{ env.PLUGIN_NAME }}@$VERSION
        
  build-postgres-14-fdw-linux-amd64:
    name: Build Postgres 14 FDW for Linux - AMD64
    needs: get-version
    runs-on:
      group: large-runners

    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV
    
      - name: Check out steampipe-postgres-fdw
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
        with:
          repository: "turbot/steampipe-postgres-fdw"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -Ev 'alpha|beta|rc|dev' | head -n 1)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Checkout the latest tag
        run: git checkout tags/${{ env.LATEST_TAG }}

      - name: Setup GoLang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Setup apt-get
        run: |-
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo env ACCEPT_EULA=Y apt-get update
          sudo env ACCEPT_EULA=Y apt-get upgrade

      - name: Install PostgreSQL14 Dev
        run: |-
          sudo apt-get -y install postgresql-server-dev-14

      - name: Find stuff and set env
        run: |-

          which pg_config
          pg_config --version

          export PATH=$(pg_config --bindir):$PATH
          export PGXS=$(pg_config --pgxs)

          export SERVER_LIB=$(pg_config --includedir)/14/server
          export INTERNAL_LIB=$(pg_config --includedir)/internal

          export CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
          export PG_CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"

          export LDFLAGS=$(pg_config --ldflags)
          export PG_LDFLAGS=$(pg_config --ldflags)

          ls -la $SERVER_LIB
          ls -la $INTERNAL_LIB

      - name: Build steampipe-postgres-fdw-anywhere
        run: |
          pwd
          ls -ltr
          make standalone plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr

      - name: Rename and zip the build-Linux folder
        run: |-
          mv build-Linux steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_amd64
          tar -czvf steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_amd64.tar.gz steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_amd64

      - name: Save Linux Build Artifact - AMD64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_amd64.tar.gz
          path: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_amd64.tar.gz
          if-no-files-found: error

  build-postgres-14-fdw-linux-arm64:
    name: Build Postgres 14 FDW for Linux - ARM64
    needs: get-version
    runs-on: 
      group: linux-arm64-runners

    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Check out steampipe-postgres-fdw
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          repository: "turbot/steampipe-postgres-fdw"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -Ev 'alpha|beta|rc|dev' | head -n 1)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Checkout the latest tag
        run: git checkout tags/${{ env.LATEST_TAG }}

      - name: Setup GoLang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Setup apt-get
        run: |-
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo env ACCEPT_EULA=Y apt-get update
          sudo env ACCEPT_EULA=Y apt-get upgrade

      - name: Install PostgreSQL14 Dev
        run: |-
          sudo apt-get -y install postgresql-server-dev-14

      - name: Find path and set env variables
        run: |-

          ls -l /usr/bin/pg_config
          export PATH=$PATH:/usr/bin
          pg_config --version

          export PATH=$(pg_config --bindir):$PATH
          export PGXS=$(pg_config --pgxs)

          export SERVER_LIB=$(pg_config --includedir)/14/server
          export INTERNAL_LIB=$(pg_config --includedir)/internal

          export CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
          export PG_CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"

          export LDFLAGS=$(pg_config --ldflags)
          export PG_LDFLAGS=$(pg_config --ldflags)

          ls -la $SERVER_LIB
          ls -la $INTERNAL_LIB

      - name: Build steampipe-postgres-fdw-anywhere
        run: |
          pwd
          ls -ltr
          make standalone plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr

      - name: Rename and zip the build-Linux folder
        run: |-
          mv build-Linux steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_arm64
          tar -czvf steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_arm64.tar.gz steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_arm64

      - name: Save Linux Build Artifact - ARM64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_arm64.tar.gz
          path: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_arm64.tar.gz
          if-no-files-found: error

  build-postgres-14-fdw-osx-amd64:
    name: Build Postgres 14 FDW for Darwin - AMD64
    needs: get-version
    runs-on: macos-13
    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Install PostgreSQL@14
        run: brew install postgresql@14

      - name: PGConfig
        run: |-
          which pg_config
          ls -l $(which pg_config)
          PGXS=$(pg_config --pgxs)
          SERVER_LIB=$(pg_config --includedir)/server
          INTERNAL_LIB=$(pg_config --includedir)/internal

          echo $PGXS
          echo $SERVER_LIB
          echo $INTERNAL_LIB

          ls -l $PGXS
          ls -l $SERVER_LIB
          ls -l $INTERNAL_LIB

      - name: Check out steampipe-postgres-fdw
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
        with:
          repository: "turbot/steampipe-postgres-fdw"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -Ev 'alpha|beta|rc|dev' | head -n 1)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Checkout the latest tag
        run: git checkout tags/${{ env.LATEST_TAG }}

      - name: Setup Golang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Find stuff and set env
        run: |-
          go version

          which pg_config
          pg_config --version

          export PATH=$(pg_config --bindir):$PATH
          export PGXS=$(pg_config --pgxs)

          export SERVER_LIB=$(pg_config --includedir)/server
          export INTERNAL_LIB=$(pg_config --includedir)/internal

          export CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
          export PG_CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"

          export LDFLAGS=$(pg_config --ldfalgs)
          export PG_LDFLAGS=$(pg_config --ldfalgs)

      - name: Build steampipe-postgres-fdw-anywhere
        run: |
          pwd
          ls -ltr
          make standalone plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr

      - name: Rename and zip the build-Darwin folder
        run: |-
          mv build-Darwin steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_amd64
          tar -czvf steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_amd64.tar.gz steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_amd64

      - name: Save MacOS Build Artifact - AMD64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_amd64.tar.gz
          path: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_amd64.tar.gz
          if-no-files-found: error

  build-postgres-14-fdw-osx-arm64:
    name: Build Postgres 14 FDW for Darwin - ARM64
    needs: get-version
    runs-on: macos-14
    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Check architecture
        run: uname -a

      - name: Install PostgreSQL@14
        run: brew install postgresql@14

      - name: PGConfig
        run: |-
          which pg_config
          ls -l $(which pg_config)
          PGXS=$(pg_config --pgxs)
          SERVER_LIB=$(pg_config --includedir)/server
          INTERNAL_LIB=$(pg_config --includedir)/internal

          echo $PGXS
          echo $SERVER_LIB
          echo $INTERNAL_LIB

          ls -l $PGXS
          ls -l $SERVER_LIB
          ls -l $INTERNAL_LIB

      - name: Check out steampipe-postgres-fdw
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
        with:
          repository: "turbot/steampipe-postgres-fdw"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -Ev 'alpha|beta|rc|dev' | head -n 1)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Checkout the latest tag
        run: git checkout tags/${{ env.LATEST_TAG }}

      - name: Setup Golang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Find stuff and set env
        run: |-
          go version

          which pg_config
          pg_config --version

          export PATH=$(pg_config --bindir):$PATH
          export PGXS=$(pg_config --pgxs)

          export SERVER_LIB=$(pg_config --includedir)/server
          export INTERNAL_LIB=$(pg_config --includedir)/internal

          export CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
          export PG_CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"

          export LDFLAGS=$(pg_config --ldfalgs)
          export PG_LDFLAGS=$(pg_config --ldfalgs)

      - name: Build steampipe-postgres-fdw-anywhere
        run: |
          pwd
          ls -ltr
          make standalone plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr

      - name: Rename and zip the build-Darwin folder
        run: |-
          mv build-Darwin steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_arm64
          tar -czvf steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_arm64.tar.gz steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_arm64

      - name: Save MacOS Build Artifact - AMD64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_arm64.tar.gz
          path: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_arm64.tar.gz
          if-no-files-found: error

  build-postgres-15-fdw-linux-amd64:
    name: Build Postgres 15 FDW for Linux - AMD64
    needs: get-version
    runs-on:
      group: large-runners

    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Check out steampipe-postgres-fdw
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
        with:
          repository: "turbot/steampipe-postgres-fdw"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -Ev 'alpha|beta|rc|dev' | head -n 1)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Checkout the latest tag
        run: git checkout tags/${{ env.LATEST_TAG }}

      - name: Setup GoLang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Setup apt-get
        run: |-
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo env ACCEPT_EULA=Y apt-get update
          sudo env ACCEPT_EULA=Y apt-get upgrade

      - name: Install PostgreSQL15 Dev
        run: |-
          sudo apt-get -y install postgresql-server-dev-15

      - name: Find stuff and set env
        run: |-

          which pg_config
          pg_config --version

          export PATH=$(pg_config --bindir):$PATH
          export PGXS=$(pg_config --pgxs)

          export SERVER_LIB=$(pg_config --includedir)/15/server
          export INTERNAL_LIB=$(pg_config --includedir)/internal

          export CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
          export PG_CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"

          export LDFLAGS=$(pg_config --ldflags)
          export PG_LDFLAGS=$(pg_config --ldflags)

          ls -la $SERVER_LIB
          ls -la $INTERNAL_LIB

      - name: Build steampipe-postgres-fdw-anywhere
        run: |
          pwd
          ls -ltr
          make standalone plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr

      - name: Rename and zip the build-Linux folder
        run: |-
          mv build-Linux steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_amd64
          tar -czvf steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_amd64.tar.gz steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_amd64

      - name: Save Linux Build Artifact - AMD64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_amd64.tar.gz
          path: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_amd64.tar.gz
          if-no-files-found: error

  build-postgres-15-fdw-linux-arm64:
    name: Build Postgres 15 FDW for Linux - ARM64
    needs: get-version
    runs-on: 
      group: linux-arm64-runners

    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Check out steampipe-postgres-fdw-anywhere
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          repository: "turbot/steampipe-postgres-fdw"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -Ev 'alpha|beta|rc|dev' | head -n 1)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Checkout the latest tag
        run: git checkout tags/${{ env.LATEST_TAG }}

      - name: Setup GoLang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Setup apt-get
        run: |-
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo env ACCEPT_EULA=Y apt-get update
          sudo env ACCEPT_EULA=Y apt-get upgrade

      - name: Install PostgreSQL15 Dev
        run: |-
          sudo apt-get -y install postgresql-server-dev-15

      - name: Find path and set env variables
        run: |-

          ls -l /usr/bin/pg_config
          export PATH=$PATH:/usr/bin
          pg_config --version

          export PATH=$(pg_config --bindir):$PATH
          export PGXS=$(pg_config --pgxs)

          export SERVER_LIB=$(pg_config --includedir)/15/server
          export INTERNAL_LIB=$(pg_config --includedir)/internal

          export CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
          export PG_CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"

          export LDFLAGS=$(pg_config --ldflags)
          export PG_LDFLAGS=$(pg_config --ldflags)

          ls -la $SERVER_LIB
          ls -la $INTERNAL_LIB

      - name: Build steampipe-postgres-fdw-anywhere
        run: |
          pwd
          ls -ltr
          make standalone plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr

      - name: Rename and zip the build-Linux folder
        run: |-
          mv build-Linux steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_arm64
          tar -czvf steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_arm64.tar.gz steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_arm64

      - name: Save Linux Build Artifact - ARM64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_arm64.tar.gz
          path: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_arm64.tar.gz
          if-no-files-found: error

  build-postgres-15-fdw-osx-amd64:
    name: Build Postgres 15 FDW for Darwin - AMD64
    needs: get-version
    runs-on: macos-13
    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Install PostgreSQL@15
        run: brew install postgresql@15

      - name: Get the installation directory of the postgresql@15 formula
        run: brew --prefix postgresql@15

      - name: Configure PATH for PostgreSQL
        run: echo $(brew --prefix postgresql@15)/bin >> $GITHUB_PATH
        
      - name: PGConfig
        run: |-
          which pg_config
          pg_config
          ls -l $(which pg_config)
          PGXS=$(pg_config --pgxs)
          SERVER_LIB=$(pg_config --includedir)/postgresql/server
          INTERNAL_LIB=$(pg_config --includedir)/postgresql/internal

          echo $PGXS
          echo $SERVER_LIB
          echo $INTERNAL_LIB

          ls -l $PGXS
          ls -l $SERVER_LIB
          ls -l $INTERNAL_LIB

      - name: Check out steampipe-postgres-fdw
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
        with:
          repository: "turbot/steampipe-postgres-fdw"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -Ev 'alpha|beta|rc|dev' | head -n 1)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Checkout the latest tag
        run: git checkout tags/${{ env.LATEST_TAG }}

      - name: Setup Golang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Find stuff and set env
        run: |-
          go version

          which pg_config
          pg_config --version

          export PGXS=$(pg_config --pgxs)

          export SERVER_LIB=$(pg_config --includedir)/postgresql/server
          export INTERNAL_LIB=$(pg_config --includedir)/postgresql/internal

          export CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
          export PG_CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"

          export LDFLAGS=$(pg_config --ldfalgs)
          export PG_LDFLAGS=$(pg_config --ldfalgs)

      - name: Build steampipe-postgres-fdw-anywhere
        run: |
          pwd
          ls -ltr
          make standalone plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr

      - name: Rename and zip the build-Darwin folder
        run: |-
          mv build-Darwin steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_amd64
          tar -czvf steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_amd64.tar.gz steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_amd64

      - name: Save MacOS Build Artifact - AMD64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_amd64.tar.gz
          path: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_amd64.tar.gz
          if-no-files-found: error

  build-postgres-15-fdw-osx-arm64:
    name: Build Postgres 15 FDW for Darwin - ARM64
    needs: get-version
    runs-on: macos-14
    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Check architecture
        run: uname -a

      - name: Install PostgreSQL@15
        run: brew install postgresql@15
      
      - name: Get the installation directory of the postgresql@15 formula
        run: brew --prefix postgresql@15

      - name: Configure PATH for PostgreSQL
        run: echo $(brew --prefix postgresql@15)/bin >> $GITHUB_PATH
        
      - name: PGConfig
        run: |-
          which pg_config
          ls -l $(which pg_config)
          PGXS=$(pg_config --pgxs)
          SERVER_LIB=$(pg_config --includedir)/postgresql/server
          INTERNAL_LIB=$(pg_config --includedir)/postgresql/internal

          echo $PGXS
          echo $SERVER_LIB
          echo $INTERNAL_LIB

          ls -l $PGXS
          ls -l $SERVER_LIB
          ls -l $INTERNAL_LIB

      - name: Check out steampipe-postgres-fdw
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
        with:
          repository: "turbot/steampipe-postgres-fdw"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -Ev 'alpha|beta|rc|dev' | head -n 1)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Checkout the latest tag
        run: git checkout tags/${{ env.LATEST_TAG }}

      - name: Setup Golang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Find stuff and set env
        run: |-
          go version

          which pg_config
          pg_config --version

          export PGXS=$(pg_config --pgxs)

          export SERVER_LIB=$(pg_config --includedir)/postgresql/server
          export INTERNAL_LIB=$(pg_config --includedir)/postgresql/internal

          export CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"
          export PG_CFLAGS="$(pg_config --cflags) -I${SERVER_LIB} -I${INTERNAL_LIB} -g"

          export LDFLAGS=$(pg_config --ldfalgs)
          export PG_LDFLAGS=$(pg_config --ldfalgs)

      - name: Build steampipe-postgres-fdw-anywhere
        run: |
          pwd
          ls -ltr
          make standalone plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr

      - name: Rename and zip the build-Darwin folder
        run: |-
          mv build-Darwin steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_arm64
          tar -czvf steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_arm64.tar.gz steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_arm64

      - name: Save MacOS Build Artifact - ARM64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_arm64.tar.gz
          path: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_arm64.tar.gz
          if-no-files-found: error

  build-sqlite-extension-linux-amd64:
    name: Build SQLite Extension for Linux - AMD64
    needs: get-version
    runs-on:
      group: large-runners

    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Check out steampipe-sqlite-extension
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
        with:
          repository: "turbot/steampipe-sqlite"
          ref: main

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Setup GoLang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Build steampipe-sqlite-extension
        run: |
          pwd
          ls -ltr
          make build plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr

      - name: Zip and rename the steampipe_sqlite_${{ env.PLUGIN_NAME }}.so
        run: |-
          tar -czvf steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz steampipe_sqlite_${{ env.PLUGIN_NAME }}.so

      - name: Save Linux Build Artifact - AMD64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          path: steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          if-no-files-found: error

  build-sqlite-extension-linux-arm64:
    name: Build SQLite Extension for Linux - ARM64
    needs: get-version
    runs-on: 
      group: linux-arm64-runners

    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Setup GoLang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22
    
      - name: Setup apt-get
        run: |-
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo env ACCEPT_EULA=Y apt-get update
          sudo env ACCEPT_EULA=Y apt-get upgrade

      - name: Check out steampipe-sqlite-extension
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
        with:
          repository: "turbot/steampipe-sqlite"
          ref: main

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Build steampipe-sqlite-extension
        run: |
          pwd
          ls -ltr
          make build plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr

      - name: Zip and rename the steampipe_sqlite_${{ env.PLUGIN_NAME }}.so
        run: |-
          tar -czvf steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz steampipe_sqlite_${{ env.PLUGIN_NAME }}.so

      - name: Save Linux Build Artifact - ARM64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          path: steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          if-no-files-found: error

  build-sqlite-extension-osx-amd64:
    name: Build SQLite Extension for Darwin - AMD64
    needs: get-version
    runs-on: macos-13

    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Check out steampipe-sqlite-extension
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
        with:
          repository: "turbot/steampipe-sqlite-extension"
          ref: main

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Setup GoLang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Build steampipe-sqlite-extension
        run: |
          pwd
          ls -ltr
          make build plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr

      - name: Zip and rename the steampipe_sqlite_${{ env.PLUGIN_NAME }}.so
        run: |-
          tar -czvf steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz steampipe_sqlite_${{ env.PLUGIN_NAME }}.so

      - name: Save Darwin Build Artifact - AMD64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
          path: steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
          if-no-files-found: error

  build-sqlite-extension-osx-arm64:
    name: Build SQLite Extension for Darwin - ARM64
    needs: get-version
    runs-on: macos-14

    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Check architecture
        run: uname -a

      - name: Check out steampipe-sqlite-extension
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
        with:
          repository: "turbot/steampipe-sqlite-extension"
          ref: main

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Setup GoLang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Build steampipe-sqlite-extension
        run: |
          pwd
          ls -ltr
          make build plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr

      - name: Zip and rename the steampipe_sqlite_${{ env.PLUGIN_NAME }}.so
        run: |-
          tar -czvf steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz steampipe_sqlite_${{ env.PLUGIN_NAME }}.so

      - name: Save Darwin Build Artifact - ARM64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
          path: steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
          if-no-files-found: error

  build-export-tool:
    name: Build Export Tool
    needs: get-version
    runs-on:
      group: large-runners

    steps:
      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV
          echo "PLUGIN_GITHUB_URL=github.com/turbot/steampipe-plugin-${plugin_name}" >> $GITHUB_ENV

      - name: Check out steampipe-table-dump
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
        with:
          repository: "turbot/steampipe-table-dump"

      - name: Get latest version tag
        run: |-
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "Version: ${VERSION}"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -Ev 'alpha|beta|rc|dev' | head -n 1)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Checkout the latest tag
        run: git checkout tags/${{ env.LATEST_TAG }}

      - name: Setup GoLang
        uses: actions/setup-go@19bb51245e9c80abacb2e91cc42b33fa478b8639 # v4.2.1
        with:
          go-version: 1.22

      - name: Build steampipe-export
        run: |
          pwd
          ls -ltr
          make release plugin=${{ env.PLUGIN_NAME }} plugin_version=${{ env.VERSION }} plugin_github_url=${{ env.PLUGIN_GITHUB_URL }}
          ls -ltr
          go mod tidy

      - name: Increase swapfile
        run: |
          sudo swapoff -a
          sudo fallocate -l 15G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo swapon --show

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@5742e2a039330cbb23ebf35f046f814d4c6ff811 # v5.1.0
        with:
          install-only: true
  
      - name: Run GoReleaser
        run: |
          chmod +x scripts/release.sh
          ./scripts/release.sh

      - name: Copy the gzipped binaries from dist
        run: |-
          ls -al dist/
          cp dist/steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          cp dist/steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          cp dist/steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
          cp dist/steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
          ls -al

      - name: Save Linux Build Artifact - AMD64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          path: steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          if-no-files-found: error

      - name: Save Linux Build Artifact - ARM64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          path: steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          if-no-files-found: error

      - name: Save Darwin Build Artifact - AMD64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
          path: steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
          if-no-files-found: error

      - name: Save Darwin Build Artifact - ARM64
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
          path: steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
          if-no-files-found: error

  build-draft-release:
    name: Build Draft Release
    runs-on:
      group: large-runners
    needs:
      # Postgres 14
      - build-postgres-14-fdw-linux-amd64
      - build-postgres-14-fdw-linux-arm64
      - build-postgres-14-fdw-osx-amd64
      - build-postgres-14-fdw-osx-arm64
      # Postgres 15
      - build-postgres-15-fdw-linux-amd64
      - build-postgres-15-fdw-linux-arm64
      - build-postgres-15-fdw-osx-amd64
      - build-postgres-15-fdw-osx-arm64
      # SQLite
      - build-sqlite-extension-linux-amd64
      - build-sqlite-extension-linux-arm64
      - build-sqlite-extension-osx-amd64
      - build-sqlite-extension-osx-arm64
      # Export
      - build-export-tool
    steps:
      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Download steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_amd64.tar.gz
        id: download_pg14_linux_amd64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_amd64.tar.gz

      - name: Download steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_arm64.tar.gz
        id: download_pg14_linux_arm64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_arm64.tar.gz

      - name: Download steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_amd64.tar.gz
        id: download_pg14_darwin_amd64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_amd64.tar.gz

      - name: Download steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_arm64.tar.gz
        id: download_pg14_darwin_arm64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_arm64.tar.gz

      - name: Download steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_amd64.tar.gz
        id: download_pg15_linux_amd64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_amd64.tar.gz

      - name: Download steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_arm64.tar.gz
        id: download_pg15_linux_arm64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_arm64.tar.gz

      - name: Download steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_amd64.tar.gz
        id: download_pg15_darwin_amd64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_amd64.tar.gz

      - name: Download steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_arm64.tar.gz
        id: download_pg15_darwin_arm64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_arm64.tar.gz

      - name: Download steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
        id: download_sqlite_linux_amd64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz

      - name: Download steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
        id: download_sqlite_linux_arm64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz

      - name: Download steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
        id: download_sqlite_darwin_amd64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz

      - name: Download steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
        id: download_sqlite_darwin_arm64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz

      - name: Download steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
        id: download_export_linux_amd64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz

      - name: Download steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
        id: download_export_linux_arm64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz

      - name: Download steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
        id: download_export_darwin_amd64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz

      - name: Download steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
        id: download_export_darwin_arm64
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz

      - name: Check Path
        run: |-
          ls -la

      - name: Get latest version tag
        run: |-
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          trim=${VERSION#"v"}
          echo $trim
          echo "VERSION=${trim}" >> $GITHUB_ENV

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Check if pre-release
        id: check_prerelease
        run: |
          if [[ "${{ env.VERSION }}" =~ (alpha|beta|rc|dev) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Create a draft release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v0.1.15
        id: create_draft_release
        with:
          draft: false
          prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
          name: ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          repository: ${{ github.repository }}
          files: |-
            ${{ steps.download_pg14_darwin_amd64.outputs.download-path }}/steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_amd64.tar.gz
            ${{ steps.download_pg14_darwin_arm64.outputs.download-path }}/steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.darwin_arm64.tar.gz
            ${{ steps.download_pg14_linux_amd64.outputs.download-path }}/steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_amd64.tar.gz
            ${{ steps.download_pg14_linux_arm64.outputs.download-path }}/steampipe_postgres_${{ env.PLUGIN_NAME }}.pg14.linux_arm64.tar.gz

            ${{ steps.download_pg15_darwin_amd64.outputs.download-path }}/steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_amd64.tar.gz
            ${{ steps.download_pg15_darwin_arm64.outputs.download-path }}/steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.darwin_arm64.tar.gz
            ${{ steps.download_pg15_linux_amd64.outputs.download-path }}/steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_amd64.tar.gz
            ${{ steps.download_pg15_linux_arm64.outputs.download-path }}/steampipe_postgres_${{ env.PLUGIN_NAME }}.pg15.linux_arm64.tar.gz

            ${{ steps.download_sqlite_darwin_amd64.outputs.download-path }}/steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
            ${{ steps.download_sqlite_darwin_arm64.outputs.download-path }}/steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
            ${{ steps.download_sqlite_linux_amd64.outputs.download-path }}/steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
            ${{ steps.download_sqlite_linux_arm64.outputs.download-path }}/steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz

            ${{ steps.download_export_darwin_amd64.outputs.download-path }}/steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
            ${{ steps.download_export_darwin_arm64.outputs.download-path }}/steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
            ${{ steps.download_export_linux_amd64.outputs.download-path }}/steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
            ${{ steps.download_export_linux_arm64.outputs.download-path }}/steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz

  check-installation-linux:
    name: Check Installation(Linux)
    runs-on: ubuntu-22.04
    needs: build-draft-release
    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Get latest version tag
        run: |-
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "Version: ${VERSION}"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Setup apt-get
        run: |-
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo env ACCEPT_EULA=Y apt-get update
          sudo env ACCEPT_EULA=Y apt-get upgrade
  
      - name: Install PostgreSQL14 Dev
        run: |-
          sudo apt-get -y install postgresql-server-dev-14

      - name: Check pg_config version
        run: pg_config --version

      - name: Download and install Postgres FDW
        run: |-
          curl -fsSL -o install_postgres_fdw.sh https://steampipe.io/install/postgres.sh
          echo | sudo -E TERM=xterm bash install_postgres_fdw.sh ${{ env.PLUGIN_NAME }} latest 2>/dev/null
          rm -f install_postgres_fdw.sh
      
      - name: Test Postgres FDW
        run: |-
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE EXTENSION ltree;"
          sudo -u postgres psql -c "CREATE EXTENSION IF NOT EXISTS steampipe_postgres_${{ env.PLUGIN_NAME }};"
          sudo -u postgres psql -c "CREATE SERVER steampipe_${{ env.PLUGIN_NAME }} FOREIGN DATA WRAPPER steampipe_postgres_${{ env.PLUGIN_NAME }};"
          sudo -u postgres psql -c "CREATE SCHEMA ${{ env.PLUGIN_NAME }};"
          sudo -u postgres psql -c "IMPORT FOREIGN SCHEMA ${{ env.PLUGIN_NAME }} FROM SERVER steampipe_${{ env.PLUGIN_NAME }} INTO ${{ env.PLUGIN_NAME }};"
          sudo -u postgres psql -c "SELECT * FROM pg_extension;"

      - name: Install SQLite3
        run: sudo apt-get install -y sqlite3

      - name: Download and install SQLite Extension
        run: |-
          echo | TERM=xterm bash <(curl -fsSL https://steampipe.io/install/sqlite.sh) ${{ env.PLUGIN_NAME }} latest 2>/dev/null

      - name: Test SQLite Extension
        run: |
          echo ".load ./steampipe_sqlite_${{ env.PLUGIN_NAME }}" | sqlite3

      - name: Download and install Export Tool
        run: |-
          curl -fsSL -o install_export.sh https://steampipe.io/install/export.sh
          echo | sudo -E TERM=xterm bash install_export.sh ${{ env.PLUGIN_NAME }} latest 2>/dev/null
          rm -f install_export.sh
      
      - name: Test Export Tool
        run: |
          # Define the expected output based on environment variables and inputs
          EXPECTED_OUTPUT="steampipe_export_${{ env.PLUGIN_NAME }} ${VERSION}"
          echo "Expected version output: $EXPECTED_OUTPUT"
          
          # Execute the command to get the actual version output
          COMMAND_OUTPUT=$(steampipe_export_${{ env.PLUGIN_NAME }} --version)
          echo "Actual command output version: $COMMAND_OUTPUT"
          
          # Compare the actual output with the expected output
          if [ "$COMMAND_OUTPUT" == "$EXPECTED_OUTPUT" ]; then
            echo "Version matches."
          else
            echo "Version does not match. Expected was $EXPECTED_OUTPUT, but got $COMMAND_OUTPUT."
            exit 1  # This exits the step with an error status, failing the job
          fi
  
  check-installation-darwin-arm64:
    name: Check Installation(Darwin ARM64)
    runs-on: macos-latest
    needs: build-draft-release
    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Get latest version tag
        run: |-
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "Version: ${VERSION}"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Install PostgreSQL14
        run: brew install postgresql@14

      - name: Start PostgreSQL service
        run: brew services start postgresql@14

      - name: Check pg_config version
        run: pg_config --version

      - name: Download and install Postgres FDW
        run: |-
          curl -fsSL -o install_postgres_fdw.sh https://steampipe.io/install/postgres.sh
          echo | sudo -E TERM=xterm bash install_postgres_fdw.sh ${{ env.PLUGIN_NAME }} latest 2>/dev/null
          rm -f install_postgres_fdw.sh

      - name: Configure PostgreSQL
        run: |-
          psql -d postgres -c "CREATE EXTENSION ltree;"
          psql -d postgres -c "CREATE EXTENSION IF NOT EXISTS steampipe_postgres_${{ env.PLUGIN_NAME }};"
          psql -d postgres -c "CREATE SERVER steampipe_${{ env.PLUGIN_NAME }} FOREIGN DATA WRAPPER steampipe_postgres_${{ env.PLUGIN_NAME }};"
          psql -d postgres -c "CREATE SCHEMA ${{ env.PLUGIN_NAME }};"
          psql -d postgres -c "IMPORT FOREIGN SCHEMA ${{ env.PLUGIN_NAME }} FROM SERVER steampipe_${{ env.PLUGIN_NAME }} INTO ${{ env.PLUGIN_NAME }};"
          psql -d postgres -c "SELECT * FROM pg_extension;"

      - name: Download and install SQLite Extension
        run: |-
          echo | TERM=xterm bash <(curl -fsSL https://steampipe.io/install/sqlite.sh) ${{ env.PLUGIN_NAME }} latest 2>/dev/null

      - name: Download and install Export Tool
        run: |-
          curl -fsSL -o install_export.sh https://steampipe.io/install/export.sh
          echo | sudo -E TERM=xterm bash install_export.sh ${{ env.PLUGIN_NAME }} latest 2>/dev/null
          rm -f install_export.sh

      - name: Test Export Tool
        run: |
          # Define the expected output based on environment variables and inputs
          EXPECTED_OUTPUT="steampipe_export_${{ env.PLUGIN_NAME }} ${VERSION}"
          echo "Expected version output: $EXPECTED_OUTPUT"
          
          # Execute the command to get the actual version output
          COMMAND_OUTPUT=$(steampipe_export_${{ env.PLUGIN_NAME }} --version)
          echo "Actual command output version: $COMMAND_OUTPUT"
          
          # Compare the actual output with the expected output
          if [ "$COMMAND_OUTPUT" == "$EXPECTED_OUTPUT" ]; then
            echo "Version matches."
          else
            echo "Version does not match. Expected was $EXPECTED_OUTPUT, but got $COMMAND_OUTPUT."
            exit 1  # This exits the step with an error status, failing the job
          fi

  check-installation-darwin-amd64:
    name: Check Installation(Darwin AMD64)
    runs-on: macos-13
    needs: build-draft-release
    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Get latest version tag
        run: |-
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "Version: ${VERSION}"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Install PostgreSQL14
        run: brew install postgresql@14

      - name: Start PostgreSQL service
        run: brew services start postgresql@14

      - name: Check pg_config version
        run: pg_config --version

      - name: Download and install Postgres FDW
        run: |-
          curl -fsSL -o install_postgres_fdw.sh https://steampipe.io/install/postgres.sh
          echo | sudo -E TERM=xterm bash install_postgres_fdw.sh ${{ env.PLUGIN_NAME }} latest 2>/dev/null
          rm -f install_postgres_fdw.sh

      - name: Configure PostgreSQL
        run: |-
          psql -d postgres -c "CREATE EXTENSION ltree;"
          psql -d postgres -c "CREATE EXTENSION IF NOT EXISTS steampipe_postgres_${{ env.PLUGIN_NAME }};"
          psql -d postgres -c "CREATE SERVER steampipe_${{ env.PLUGIN_NAME }} FOREIGN DATA WRAPPER steampipe_postgres_${{ env.PLUGIN_NAME }};"
          psql -d postgres -c "CREATE SCHEMA ${{ env.PLUGIN_NAME }};"
          psql -d postgres -c "IMPORT FOREIGN SCHEMA ${{ env.PLUGIN_NAME }} FROM SERVER steampipe_${{ env.PLUGIN_NAME }} INTO ${{ env.PLUGIN_NAME }};"
          psql -d postgres -c "SELECT * FROM pg_extension;"

      - name: Download and install SQLite Extension
        run: |-
          echo | TERM=xterm bash <(curl -fsSL https://steampipe.io/install/sqlite.sh) ${{ env.PLUGIN_NAME }} latest 2>/dev/null

      - name: Download and install Export Tool
        run: |-
          curl -fsSL -o install_export.sh https://steampipe.io/install/export.sh
          echo | sudo -E TERM=xterm bash install_export.sh ${{ env.PLUGIN_NAME }} latest 2>/dev/null
          rm -f install_export.sh

      - name: Test Export Tool
        run: |
          # Define the expected output based on environment variables and inputs
          EXPECTED_OUTPUT="steampipe_export_${{ env.PLUGIN_NAME }} ${VERSION}"
          echo "Expected version output: $EXPECTED_OUTPUT"
          
          # Execute the command to get the actual version output
          COMMAND_OUTPUT=$(steampipe_export_${{ env.PLUGIN_NAME }} --version)
          echo "Actual command output version: $COMMAND_OUTPUT"
          
          # Compare the actual output with the expected output
          if [ "$COMMAND_OUTPUT" == "$EXPECTED_OUTPUT" ]; then
            echo "Version matches."
          else
            echo "Version does not match. Expected was $EXPECTED_OUTPUT, but got $COMMAND_OUTPUT."
            exit 1  # This exits the step with an error status, failing the job
          fi
            
  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    if: always()
    needs:
      - get-version
      - build-postgres-14-fdw-linux-amd64
      - build-postgres-14-fdw-linux-arm64
      - build-postgres-14-fdw-osx-amd64
      - build-postgres-14-fdw-osx-arm64
      - build-postgres-15-fdw-linux-amd64
      - build-postgres-15-fdw-linux-arm64
      - build-postgres-15-fdw-osx-amd64
      - build-postgres-15-fdw-osx-arm64
      - build-sqlite-extension-linux-amd64
      - build-sqlite-extension-linux-arm64
      - build-sqlite-extension-osx-amd64
      - build-sqlite-extension-osx-arm64
      - build-export-tool
      - build-draft-release
      - check-installation-linux
      - check-installation-darwin-arm64
      - check-installation-darwin-amd64
    steps:
      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Check for failures
        id: check_failures
        run: |
          failed_jobs=""
          
          # Check each job's status using static checks
          if [[ "${{ needs.get-version.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- get-version"
          fi
          if [[ "${{ needs.build-postgres-14-fdw-linux-amd64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-postgres-14-fdw-linux-amd64"
          fi
          if [[ "${{ needs.build-postgres-14-fdw-linux-arm64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-postgres-14-fdw-linux-arm64"
          fi
          if [[ "${{ needs.build-postgres-14-fdw-osx-amd64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-postgres-14-fdw-osx-amd64"
          fi
          if [[ "${{ needs.build-postgres-14-fdw-osx-arm64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-postgres-14-fdw-osx-arm64"
          fi
          if [[ "${{ needs.build-postgres-15-fdw-linux-amd64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-postgres-15-fdw-linux-amd64"
          fi
          if [[ "${{ needs.build-postgres-15-fdw-linux-arm64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-postgres-15-fdw-linux-arm64"
          fi
          if [[ "${{ needs.build-postgres-15-fdw-osx-amd64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-postgres-15-fdw-osx-amd64"
          fi
          if [[ "${{ needs.build-postgres-15-fdw-osx-arm64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-postgres-15-fdw-osx-arm64"
          fi
          if [[ "${{ needs.build-sqlite-extension-linux-amd64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-sqlite-extension-linux-amd64"
          fi
          if [[ "${{ needs.build-sqlite-extension-linux-arm64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-sqlite-extension-linux-arm64"
          fi
          if [[ "${{ needs.build-sqlite-extension-osx-amd64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-sqlite-extension-osx-amd64"
          fi
          if [[ "${{ needs.build-sqlite-extension-osx-arm64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-sqlite-extension-osx-arm64"
          fi
          if [[ "${{ needs.build-export-tool.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-export-tool"
          fi
          if [[ "${{ needs.build-draft-release.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- build-draft-release"
          fi
          if [[ "${{ needs.check-installation-linux.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- check-installation-linux"
          fi
          if [[ "${{ needs.check-installation-darwin-arm64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- check-installation-darwin-arm64"
          fi
          if [[ "${{ needs.check-installation-darwin-amd64.result }}" == "failure" ]]; then
            failed_jobs="$failed_jobs\n- check-installation-darwin-amd64"
          fi
          
          if [[ -n "$failed_jobs" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=The following jobs failed:$failed_jobs" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=All jobs completed successfully" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack Notification
        uses: act10ns/slack@87c73aef9f8838eb6feae81589a6b1487a4a9e08 # v1.6.0
        with:
          status: ${{ steps.check_failures.outputs.status }}
          message: ${{ steps.check_failures.outputs.message }}
          channel: "#steampipe-plugin-anywhere-release-updates"
          webhook-url: ${{ secrets.STEAMPIPE_PLUGIN_ANYWHERE_RELEASE_COMPONENT_SLACK_WEBHOOK_URL }}
