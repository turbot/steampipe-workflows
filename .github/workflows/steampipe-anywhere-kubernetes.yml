name: Steampipe Anywhere Components (Kubernetes)

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version to release (must be prefixed with 'v')"
        required: true

  workflow_call:
        
jobs:
  get-version:
    name: Get Version
    runs-on: ubuntu-latest
    steps:
      - name: Check out steampipe-export
        uses: actions/checkout@v2
        with:
          repository: "turbot/steampipe-export"
          ref: main

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Get latest version tag
        run: |-
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "Version: ${VERSION}"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Setup GoLang
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Fetch plugin module
        run: go get github.com/turbot/steampipe-plugin-${{ env.PLUGIN_NAME }}@$VERSION

  build-sqlite-extension-linux-amd64:
    name: Build SQLite Extension for Linux - AMD64
    needs: get-version
    runs-on: ubuntu-latest

    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Check out steampipe-sqlite-extension
        uses: actions/checkout@v2
        with:
          repository: "turbot/steampipe-sqlite"
          ref: main

      - name: Setup GoLang
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Build steampipe-sqlite-extension
        run: |
          pwd
          ls -ltr
          make build plugin=${{ env.PLUGIN_NAME }}
          ls -ltr

      - name: Zip and rename the steampipe_sqlite_${{ env.PLUGIN_NAME }}.so
        run: |-
          tar -czvf steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz steampipe_sqlite_${{ env.PLUGIN_NAME }}.so

      - name: Save Linux Build Artifact - AMD64
        uses: actions/upload-artifact@v3
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          path: steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          if-no-files-found: error

  build-sqlite-extension-linux-arm64:
    name: Build SQLite Extension for Linux - ARM64
    needs: get-version
    runs-on: 
      group: linux-arm64-runners

    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.22
  
      - name: Setup apt-get
        run: |-
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo env ACCEPT_EULA=Y apt-get update
          sudo env ACCEPT_EULA=Y apt-get upgrade

      - name: Check out steampipe-sqlite-extension
        uses: actions/checkout@v3
        with:
          repository: "turbot/steampipe-sqlite"
          ref: main

      - name: Build steampipe-sqlite-extension
        run: |
          pwd
          ls -ltr
          make build plugin=${{ env.PLUGIN_NAME }}
          ls -ltr

      - name: Zip and rename the steampipe_sqlite_${{ env.PLUGIN_NAME }}.so
        run: |-
          tar -czvf steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz steampipe_sqlite_${{ env.PLUGIN_NAME }}.so

      - name: Save Linux Build Artifact - ARM64
        uses: actions/upload-artifact@v3
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          path: steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          if-no-files-found: error

  build-sqlite-extension-osx-amd64:
    name: Build SQLite Extension for Darwin - AMD64
    needs: get-version
    runs-on: macos-13

    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Check out steampipe-sqlite-extension
        uses: actions/checkout@v2
        with:
          repository: "turbot/steampipe-sqlite-extension"
          ref: main

      - name: Setup GoLang
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Build steampipe-sqlite-extension
        run: |
          pwd
          ls -ltr
          make build plugin=${{ env.PLUGIN_NAME }}
          ls -ltr

      - name: Zip and rename the steampipe_sqlite_${{ env.PLUGIN_NAME }}.so
        run: |-
          tar -czvf steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz steampipe_sqlite_${{ env.PLUGIN_NAME }}.so

      - name: Save Darwin Build Artifact - AMD64
        uses: actions/upload-artifact@v3
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
          path: steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
          if-no-files-found: error

  build-sqlite-extension-osx-arm64:
    name: Build SQLite Extension for Darwin - ARM64
    needs: get-version
    runs-on: macos-14

    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Check architecture
        run: uname -a

      - name: Check out steampipe-sqlite-extension
        uses: actions/checkout@v2
        with:
          repository: "turbot/steampipe-sqlite-extension"
          ref: main

      - name: Setup GoLang
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Build steampipe-sqlite-extension
        run: |
          pwd
          ls -ltr
          make build plugin=${{ env.PLUGIN_NAME }}
          ls -ltr

      - name: Zip and rename the steampipe_sqlite_${{ env.PLUGIN_NAME }}.so
        run: |-
          tar -czvf steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz steampipe_sqlite_${{ env.PLUGIN_NAME }}.so

      - name: Save Darwin Build Artifact - ARM64
        uses: actions/upload-artifact@v3
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
          path: steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
          if-no-files-found: error

  build-export-tool:
    name: Build Export Tool
    needs: get-version
    runs-on: ubuntu-latest

    steps:
      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Check out steampipe-export
        uses: actions/checkout@v2
        with:
          repository: "turbot/steampipe-export"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git tag --sort=-v:refname | grep -Ev 'alpha|beta|rc|dev' | head -n 1)
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

      - name: Checkout the latest tag
        run: git checkout tags/${{ env.LATEST_TAG }}

      - name: Setup GoLang
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Build steampipe-export
        run: |
          pwd
          ls -ltr
          make release plugin=${{ env.PLUGIN_NAME }}
          ls -ltr
          go mod tidy

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          install-only: true
  
      - name: Run GoReleaser
        run: |
          chmod +x scripts/release.sh
          ./scripts/release.sh

      - name: Copy the gzipped binaries from dist
        run: |-
          ls -al dist/
          cp dist/steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          cp dist/steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          cp dist/steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
          cp dist/steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
          ls -al

      - name: Save Linux Build Artifact - AMD64
        uses: actions/upload-artifact@v3
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          path: steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          if-no-files-found: error

      - name: Save Linux Build Artifact - ARM64
        uses: actions/upload-artifact@v3
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          path: steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          if-no-files-found: error

      - name: Save Darwin Build Artifact - AMD64
        uses: actions/upload-artifact@v3
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
          path: steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
          if-no-files-found: error

      - name: Save Darwin Build Artifact - ARM64
        uses: actions/upload-artifact@v3
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
          path: steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
          if-no-files-found: error

  build-osquery-extension:
    name: Build Osquery Extension
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Check out steampipe-osquery
        uses: actions/checkout@v2
        with:
          repository: "turbot/steampipe-osquery"
          ref: main
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup GoLang
        uses: actions/setup-go@v4
        with:
          go-version: 1.21

      - name: Build steampipe-osquery
        run: |
          pwd
          ls -ltr
          make build plugin=${{ env.PLUGIN_NAME }}
          ls -ltr
          go mod tidy

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --snapshot --skip-publish --rm-dist

      - name: Copy the gzipped binaries from dist
        run: |-
          ls -al dist/
          cp dist/steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          cp dist/steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          ls -al

      - name: Save Linux Build Artifact - AMD64
        uses: actions/upload-artifact@v3
        with:
          name: steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          path: steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
          if-no-files-found: error

      - name: Save Linux Build Artifact - ARM64
        uses: actions/upload-artifact@v3
        with:
          name: steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          path: steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
          if-no-files-found: error
    
  build-draft-release:
    name: Build Draft Release
    runs-on: ubuntu-latest
    needs:
      # SQLite
      - build-sqlite-extension-linux-amd64
      - build-sqlite-extension-linux-arm64
      - build-sqlite-extension-osx-amd64
      - build-sqlite-extension-osx-arm64
      # Export
      - build-export-tool
      # Osquery
      - build-osquery-extension
    steps:
      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Download steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
        id: download_sqlite_linux_amd64
        uses: actions/download-artifact@v3
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz

      - name: Download steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
        id: download_sqlite_linux_arm64
        uses: actions/download-artifact@v3
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz

      - name: Download steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
        id: download_sqlite_darwin_amd64
        uses: actions/download-artifact@v3
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz

      - name: Download steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
        id: download_sqlite_darwin_arm64
        uses: actions/download-artifact@v3
        with:
          name: steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz

      - name: Download steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
        id: download_export_linux_amd64
        uses: actions/download-artifact@v3
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz

      - name: Download steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
        id: download_export_linux_arm64
        uses: actions/download-artifact@v3
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz

      - name: Download steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
        id: download_export_darwin_amd64
        uses: actions/download-artifact@v3
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz

      - name: Download steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
        id: download_export_darwin_arm64
        uses: actions/download-artifact@v3
        with:
          name: steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz

      - name: Download steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
        id: download_osquery_linux_amd64
        uses: actions/download-artifact@v3
        with:
          name: steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz

      - name: Download steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz
        id: download_osquery_linux_arm64
        uses: actions/download-artifact@v3
        with:
          name: steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz

      - name: Check Path
        run: |-
          ls -la

      - name: Get latest version tag
        run: |-
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          trim=${VERSION#"v"}
          echo $trim
          echo "VERSION=${trim}" >> $GITHUB_ENV

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"
          
      - name: Create a draft release
        uses: softprops/action-gh-release@v1
        id: create_draft_release
        with:
          draft: false
          prerelease: false
          name: ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          repository: ${{ github.repository }}
          files: |-
            ${{ steps.download_sqlite_darwin_amd64.outputs.download-path }}/steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
            ${{ steps.download_sqlite_darwin_arm64.outputs.download-path }}/steampipe_sqlite_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
            ${{ steps.download_sqlite_linux_amd64.outputs.download-path }}/steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
            ${{ steps.download_sqlite_linux_arm64.outputs.download-path }}/steampipe_sqlite_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz

            ${{ steps.download_export_darwin_amd64.outputs.download-path }}/steampipe_export_${{ env.PLUGIN_NAME }}.darwin_amd64.tar.gz
            ${{ steps.download_export_darwin_arm64.outputs.download-path }}/steampipe_export_${{ env.PLUGIN_NAME }}.darwin_arm64.tar.gz
            ${{ steps.download_export_linux_amd64.outputs.download-path }}/steampipe_export_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
            ${{ steps.download_export_linux_arm64.outputs.download-path }}/steampipe_export_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz

            ${{ steps.download_osquery_linux_amd64.outputs.download-path }}/steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_amd64.tar.gz
            ${{ steps.download_osquery_linux_arm64.outputs.download-path }}/steampipe_osquery_${{ env.PLUGIN_NAME }}.linux_arm64.tar.gz

  check-installation-linux:
    name: Check Installation(Linux)
    runs-on: ubuntu-latest
    needs: build-draft-release
    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Get latest version tag
        run: |-
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "Version: ${VERSION}"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Install SQLite3
        run: sudo apt-get install -y sqlite3

      - name: Download and install SQLite Extension
        run: |-
          echo | TERM=xterm bash <(curl -fsSL https://steampipe.io/install/sqlite.sh) ${{ env.PLUGIN_NAME }} latest 2>/dev/null

      - name: Test SQLite Extension
        run: |
          echo ".load ./steampipe_sqlite_${{ env.PLUGIN_NAME }}" | sqlite3

      - name: Download and install Export Tool
        run: |-
          curl -fsSL -o install_export.sh https://steampipe.io/install/export.sh
          echo | sudo -E TERM=xterm bash install_export.sh ${{ env.PLUGIN_NAME }} latest 2>/dev/null
          rm -f install_export.sh
      
      - name: Test Export Tool
        run: |
          # Define the expected output based on environment variables and inputs
          EXPECTED_OUTPUT="steampipe_export_${{ env.PLUGIN_NAME }} ${VERSION}"
          echo "Expected version output: $EXPECTED_OUTPUT"
          
          # Execute the command to get the actual version output
          COMMAND_OUTPUT=$(steampipe_export_${{ env.PLUGIN_NAME }} --version)
          echo "Actual command output version: $COMMAND_OUTPUT"
          
          # Compare the actual output with the expected output
          if [ "$COMMAND_OUTPUT" == "$EXPECTED_OUTPUT" ]; then
            echo "Version matches."
          else
            echo "Version does not match. Expected was $EXPECTED_OUTPUT, but got $COMMAND_OUTPUT."
            exit 1  # This exits the step with an error status, failing the job
          fi
  
  check-installation-darwin-arm64:
    name: Check Installation(Darwin ARM64)
    runs-on: macos-latest
    needs: build-draft-release
    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Get latest version tag
        run: |-
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "Version: ${VERSION}"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Download and install SQLite Extension
        run: |-
          echo | TERM=xterm bash <(curl -fsSL https://steampipe.io/install/sqlite.sh) ${{ env.PLUGIN_NAME }} latest 2>/dev/null

      - name: Download and install Export Tool
        run: |-
          curl -fsSL -o install_export.sh https://steampipe.io/install/export.sh
          echo | sudo -E TERM=xterm bash install_export.sh ${{ env.PLUGIN_NAME }} latest 2>/dev/null
          rm -f install_export.sh

      - name: Test Export Tool
        run: |
          # Define the expected output based on environment variables and inputs
          EXPECTED_OUTPUT="steampipe_export_${{ env.PLUGIN_NAME }} ${VERSION}"
          echo "Expected version output: $EXPECTED_OUTPUT"
          
          # Execute the command to get the actual version output
          COMMAND_OUTPUT=$(steampipe_export_${{ env.PLUGIN_NAME }} --version)
          echo "Actual command output version: $COMMAND_OUTPUT"
          
          # Compare the actual output with the expected output
          if [ "$COMMAND_OUTPUT" == "$EXPECTED_OUTPUT" ]; then
            echo "Version matches."
          else
            echo "Version does not match. Expected was $EXPECTED_OUTPUT, but got $COMMAND_OUTPUT."
            exit 1  # This exits the step with an error status, failing the job
          fi

  check-installation-darwin-amd64:
    name: Check Installation(Darwin AMD64)
    runs-on: macos-13
    needs: build-draft-release
    steps:
      - name: Check architecture
        run: uname -a

      - name: Set environment variables
        run: |
          plugin_name=$(echo $GITHUB_REPOSITORY | cut -d'-' -f 3)
          echo $plugin_name
          echo "PLUGIN_NAME=${plugin_name}" >> $GITHUB_ENV

      - name: Get latest version tag
        run: |-
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "Version: ${VERSION}"

      - name: If workflow_dispatch, get version from input
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
          echo "Version: ${VERSION}"

      - name: Download and install SQLite Extension
        run: |-
          echo | TERM=xterm bash <(curl -fsSL https://steampipe.io/install/sqlite.sh) ${{ env.PLUGIN_NAME }} latest 2>/dev/null

      - name: Download and install Export Tool
        run: |-
          curl -fsSL -o install_export.sh https://steampipe.io/install/export.sh
          echo | sudo -E TERM=xterm bash install_export.sh ${{ env.PLUGIN_NAME }} latest 2>/dev/null
          rm -f install_export.sh

      - name: Test Export Tool
        run: |
          # Define the expected output based on environment variables and inputs
          EXPECTED_OUTPUT="steampipe_export_${{ env.PLUGIN_NAME }} ${VERSION}"
          echo "Expected version output: $EXPECTED_OUTPUT"
          
          # Execute the command to get the actual version output
          COMMAND_OUTPUT=$(steampipe_export_${{ env.PLUGIN_NAME }} --version)
          echo "Actual command output version: $COMMAND_OUTPUT"
          
          # Compare the actual output with the expected output
          if [ "$COMMAND_OUTPUT" == "$EXPECTED_OUTPUT" ]; then
            echo "Version matches."
          else
            echo "Version does not match. Expected was $EXPECTED_OUTPUT, but got $COMMAND_OUTPUT."
            exit 1  # This exits the step with an error status, failing the job
          fi
            
